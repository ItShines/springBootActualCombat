三、spring高级话题
Spring Aware
    Spring的依赖注入的最大的亮点就是你所有的Bean对Spring的容器的存在是没有意识的。即你可以将你的
        容器替换成别的容器，如Google Guice ,这时Bean之间的耦合度比较低。
    但是实际项目中，你不可避免的要用到Spring容器本身的功能资源，这时你的Bean必须要意思到Spring容
        器的存在，才能调用Spring所提供的资源，这就是所谓的Spring Aware。其实Spring Aware本来就是
        Spring设计用来框架内部使用的，若使用了Spring Aware，你的Bean将会和Spring的框架耦合。
    Spring提供的Aware接口如下：
        BeanNameAware                   获得到容器中Bean的名称
        BeanFactoryAware                获得当前bean factory，这样可以调到容器的服务
        ApplicationContextAware         获得当前的application context，这样可以调到容器的服务
        MessageSourceAware              获取message source，这样可以获得文本信息
        ApplicationEventPublisherAware  应用时间发布器，可以发布事件，2.5节EventPublisher也可以
                                        实现这个接口来发布事件
        ResourceLoadAware               获得资源加载器，可以获得外部资源文件
    Spring Aware的目的是为了让Bean获得Spring容器的服务。因为ApplicationContext接口集成了
        MessageSource接口、ApplicationEventPublisher接口和ResourceLoad接口，所以Bean继承了
        ApplicationContextAware可以获得Spring容器的所有服务，但原则上我们还是用什么接口，
        实现什么接口。
多线程 ThreadPoolTaskExecutor
    Spring通过任务执行器（TaskExecutor）实现多线程和并发编程，使用ThreadPoolTaskExecutor可实现一个
        基于线程池的。 实际开发中线程都是异步的，所以配置类需要通过@EnableAsync开启对异步线程支持，并
        在实际的Bean中通过使用@Async注解来声明其是一个异步任务。

计划任务Scheduled
    Spring3.1后，计划任务变得简单，首先通过配置类注解@EnableScheduling来开启对计划任务的支持，然后
        在需要执行计划任务的方法上注解@Scheduled生命这是一个计划任务。

条件注解@Conditional
    Spring 4 使用@Conditional注解，比Profile更通用，支持基于条件的Bean的创建。
    @Conditional根据满足某一特定条件创建一个特定的Bean，我们可以利用这一特性，根据特定条件进行一些
        自动的配置
    Conditional通过实现Condition接口，并重写其matches方法来构造判断条件。
组合注解与元注解WiselyConfiguration
    Spring设计原则消除模板代码
    元注解：可以注解到别的注解上的注解；被注解的注解称之为组合注解，组合注解具有元注解的功能。
        Spring的很多注解都可以称之为元注解，而且Spring本身已经有很多组合注解，如@Configuration
        就是一个组合@Component注解，表明这个类本身也是一个Bean。
    @Configuration和@ComponentScan注解组合成一个组合注解。
@Enable*注解的使用原理


















