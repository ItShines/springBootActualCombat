二、Spring配置
Scope
    Scope是描述Spring如何新建Bean的实例的,Spring的Scope有以下几种，通过@Scope注解实现
        1.Singleton:一个Spring容器中只有一个Bean的实例,此为Spring默认配置，全容器共享一个实例;
        2.Prototype:每次调用创建一个新的Bean的实例;
        3.Request:在Web项目中,给每一个http request 新建一个Bean的实例;
        4.Session:在Web项目中,给每一个http session 新建一个Bean的实例;
        5.GlobalSession:这个只在portal应用中有用,给没一个portal http session 新建一个Bean的实例;
        6.Spring Batch 中有一个Scope使用的是@SetpScope,批处理详解
EL和资源调用
    Spring的EL表达式支持在XML和和注解中使用表达式,我们可以实现资源的注入。
    Spring主要在@Value注解的参数中使用表达式
        1.注入普通字符;
        2.注入操作系统属性;
        3.注入表达式运算结果;
        4.注入其他Bean的属性;
        5.注入文件内容;
        6.注入网址内容;
        7.注入属性文件。
Bean的初始化和销毁
    Spring对Bean的生命周期的操作提供支持(Bean的使用之前，销毁之前做些事情)
        java配置:使用@Bean的initMethod和destroyMethod(相当于xml的init-method 和destroy-method)
        注解配置:利用JSR-250的@PostConstruct(构造函数执行完之后执行)和@PreDestroy(Bean销毁前执行)
Profile在不同的环境下使用不同的配置提供了支持()
    1.通过设定Environment的ActiveProfiles来设定当前context需要使用的环境配置。在开发中使用@Profile
        注解类或者方法,达到不同在不同情况下选择实例化不同的Bean。
    2.通过设定Jvm的spring.profiles.active参数来设置配置环境。
    3.Web项目设置在Servlet的context parameter中。
        servlet2.5及以下
        <servlet>
            <servlet-name>dispatcher</servlet-name>
            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
            <!-- 在servlet中设置profile的默认值 -->
            <init-param>
                <param-name>spring.profiles.default</param-name>
                <param-value>production</param-value>
            </init-param>
            <load-on-startup>1</load-on-startup>
        </servlet>
         servlet3.0及以上
         public class WebInit implements WebApplicationInitializer{
            @Override
            public void onStartup(ServletContext container) throws ServletException{
                 container.setInitParameter("spring.profiles.default","dev");
            }
         }
事件(Application Event)
    Spring的事件(Application Event)为Bean与Bean消息之间的通讯提供了支持。
    当一个Bean处理完一件任务之后，希望另一Bean知道并作出相应处理，这时我们就需要让另外一个
        Bean监听当前Bean所发送的事件。
    Spring的事件需要遵循以下流程：
        1.自定义事件，集成ApplicationEvent;
        2.定义事件监听容器，实现ApplicationListener;
        3.使用容器发布事件。















