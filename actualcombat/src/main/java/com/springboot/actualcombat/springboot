六、SpringBoot
一、基本配置
    1.入口类和@SpringBootApplication
        @SpringBootApplication组合注解主要组合了@SpringBootConfiguration、@EnableAutoConfiguration、
            @componentScan;若不用@SpringBootApplication则在入口类加入相应注解就行。
        @EnableAutoConfiguration让Spring Boot根据类路径的jar包依赖为当前项目进行自动配置;
    2.关闭特定的配置使用@SpringBootApplication注解的exclude参数;
    3.替换banner图标:(内容可从获取--http://patorjk.com/software/taag/)
        在src/main/resources下新建一个banner.txt文件替换内容即可
    4.SpringBoot配置文件
        SpringBoot使用一个全局的配置文件application.properties 或者application.yml,
            放置在src/main/resources目录下或者类路径的/config下;
    5.start pom
        官方提供 start pom
        第三方提供 start pom
    6.如何使用xml文件配置
        Spring Boot提倡零配置，即无xml配置。但在实际项目中，可能会有特殊要求必须使用xml配置，
            这时可以通过Spring提供的@ImportResource来加载xml,例如：
            @ImportResource({"classpath:some-context.xml","classpath:another-context.xml"})
    7.外部配置：
        Spring Boot允许使用properties文件、yaml文件或者命令行参数作为外部配置:
        1.命令行配置:
          Spring Boot可以是基于jar包运行的,打成jar包的程序可直接使用下面命令运行:
            java -jar xxx.jar
          可使用下面命令修改端口:
            java -jar xxx.jar --server.port = 9090
        2.常规配置属性:(ActualcombatApplication)
            在Spring常规环境下,注入properties文件里的值的方式,通过@PropertySource指明properties
                位置,然后通过@Value注入值即可;
            在SpringBoot环境下,我们只需要在application.properties里定义属性,直接使用@Value注入即可。
        3.类型安全的配置(基于properties)
            上例中使用@Value逐个注入每个配置较为繁琐;此时SpringBoot提供了基于类型安全的配置方式,
                通过使用@ConfigurationProperties将properties属性和一个Bean关联,实现类型安全配置.
        4.日志配置
            SpringBoot支持Java Util Logging、Log4J、log4J2、logback作为日志框架,默认情况下,
                SpringBoot使用logback作为日志框架
                配置日志文件:
                    logging.file = D:/log/log.log
                配置日志文件级别:
                    logging.level.org.springframework.web = DEBUG
        5.Profiles
            创建不同环境配置:
                application-dev.properties(开发环境);
                application-prod.properties(生产环境);
            在application.properties 里增加:
                spring.profiles.active= prod
        6.SpringBoot运行原理:
            SpringBoot关于自动配置的源码在spring-boot-autoconfigure-2.0.3.RELEASE.jar下,若想
                知道SpringBoot为我们做了哪些配置,可以查看这里的源码。
            查看当前项目中已启用和未启用的自动配置的报告:
                1.运行时增加--debug参数:
                    java -jar xx.jar --debug
                2.在application.properties增加属性:
                    debug = true
            1.运作原理:
                ActualcombatApplication启动类中使用@SpringBootApplication这个组合注解,它的核心
                    功能是由@EnableAutoConfiguration注解提供的,而@EnableAutoConfiguration注解
                    的源码中使用了@Import({AutoConfigurationImportSelector.class})导入关键的
                    配置,使用SpringFactoriesLoader.loadFactoryNames方法扫描META-INF/spring.f
                    -actories文件的jar包,而我们的spring-boot-autoconfigure-2.0.x.RELEASE.jar
                    下META-INF/spring.factories里记录所有声明的自动配置 例如:# Auto Configure
            2.核心注解:
                在spring-boot-autoconfigure-2.0.x.RELEASE.jar下打开对应的*AutoConfiguration文件
                一般都有如下的条件注解,在spring-boot-autoconfigure-2.0.x.RELEASE.jar包的
                org.springframework.boot.autoconfigure.condition下,条件注解如下:
                    @ConditionalOnBean:当容器里有指定的bean的条件下。
                    @ConditionalOnClass:当类路径下有指定的类的条件下。
                    @ConditionalOnCloudPlatform:指定的云平台激活时满足条件。
                    @ConditionalOnExpression:基于SpEl表达式作为判断条件。
                    @ConditionalOnJava:基于JVM版本作为判断条件。
                    @ConditionalOnJndi:在JNDI存在的条件下查找指定位置。
                    @ConditionalOnMissingBean:在容器没有指定Bean的情况下。
                    @ConditionalOnMissingClass:在类路径下没有指定的类的条件下。
                    @ConditionalOnNotWebApplication:当前项目不是web项目的条件下。
                    @ConditionalOnProperty:指定的属性是否有指定的值。
                    @ConditionalOnResource:类路径是否有指定的值。
                    @ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，活着虽然由多个但是
                        指定首选的Bean。
                    @ConditionalOnWebApplication:当前项目是web项目的条件下。
                这些注解都是组合啦@Conditional元注解，只是使用了不同的条件(Condition)
                分析@ConditionalOnWebApplication注解,暂时不做处理。
            3.实例分析
                SpringBoot内置自动配置功能:http编码的实现
                常规配置:filter
                    <filter>
                        <filter-name>encodingFilter</filter-name>
                        <filter-class>org.springframework.web.filter.CharacterEncodingFilter<filter-class>
                        <init-param>
                            <param-name>encoding</param-name>
                            <param-value>UTF-8</param-value>
                        </init-param>
                        <init-param>
                            <param-name>forceEncoding</param-name>
                            <param-value>true</param-value>
                        </init-param>
                    </filter>
                    拦截器
                    <filter-mapping>
                        <filter-name>encodingFilter</filter-name>
                        <url-pattern>/*</url-pattern>
                    /filter-mapping>
                自动配置: 版本不同,需更新书籍
                    需满足2条件
                        1.能配置CharacterEncodingFilter这个Bean;
                        2.能配置encoding和forceEncoding这两个参数。

            4.实战
                当包含某个类存在的时候,自动配置这个类的Bean,并可将Bean的属性在application.properties里配置。
                  <dependency>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-autoconfigure</artifactId>
                      <version>2.0.3.RELEASE</version>
                  </dependency>


















